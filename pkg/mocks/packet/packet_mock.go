// Code generated by MockGen. DO NOT EDIT.
// Source: .//packet/packet.go

// Package packet is a generated GoMock package.
package packet

import (
	reflect "reflect"

	packets "github.com/eclipse/paho.golang/packets"
	gomock "github.com/golang/mock/gomock"
)

// MockStorePublishPacket is a mock of StorePublishPacket interface.
type MockStorePublishPacket struct {
	ctrl     *gomock.Controller
	recorder *MockStorePublishPacketMockRecorder
}

// MockStorePublishPacketMockRecorder is the mock recorder for MockStorePublishPacket.
type MockStorePublishPacketMockRecorder struct {
	mock *MockStorePublishPacket
}

// NewMockStorePublishPacket creates a new mock instance.
func NewMockStorePublishPacket(ctrl *gomock.Controller) *MockStorePublishPacket {
	mock := &MockStorePublishPacket{ctrl: ctrl}
	mock.recorder = &MockStorePublishPacketMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorePublishPacket) EXPECT() *MockStorePublishPacketMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockStorePublishPacket) Decode(arg0 []byte) (packets.Publish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", arg0)
	ret0, _ := ret[0].(packets.Publish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode.
func (mr *MockStorePublishPacketMockRecorder) Decode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockStorePublishPacket)(nil).Decode), arg0)
}

// Encode mocks base method.
func (m *MockStorePublishPacket) Encode() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockStorePublishPacketMockRecorder) Encode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockStorePublishPacket)(nil).Encode))
}
