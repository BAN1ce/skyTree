// Code generated by MockGen. DO NOT EDIT.
// Source: .//middleware/middleware.go

// Package middleware is a generated GoMock package.
package middleware

import (
	reflect "reflect"

	client "github.com/BAN1ce/skyTree/inner/broker/client"
	packets "github.com/eclipse/paho.golang/packets"
	gomock "github.com/golang/mock/gomock"
)

// MockPacketMiddleware is a mock of PacketMiddleware interface.
type MockPacketMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockPacketMiddlewareMockRecorder
}

// MockPacketMiddlewareMockRecorder is the mock recorder for MockPacketMiddleware.
type MockPacketMiddlewareMockRecorder struct {
	mock *MockPacketMiddleware
}

// NewMockPacketMiddleware creates a new mock instance.
func NewMockPacketMiddleware(ctrl *gomock.Controller) *MockPacketMiddleware {
	mock := &MockPacketMiddleware{ctrl: ctrl}
	mock.recorder = &MockPacketMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPacketMiddleware) EXPECT() *MockPacketMiddlewareMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockPacketMiddleware) Handle(client *client.Client, packet *packets.ControlPacket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", client, packet)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockPacketMiddlewareMockRecorder) Handle(client, packet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockPacketMiddleware)(nil).Handle), client, packet)
}
