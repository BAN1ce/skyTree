// Code generated by MockGen. DO NOT EDIT.
// Source: .//middleware/auth_password.go

// Package middleware is a generated GoMock package.
package middleware

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPasswordAuth is a mock of PasswordAuth interface.
type MockPasswordAuth struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordAuthMockRecorder
}

// MockPasswordAuthMockRecorder is the mock recorder for MockPasswordAuth.
type MockPasswordAuthMockRecorder struct {
	mock *MockPasswordAuth
}

// NewMockPasswordAuth creates a new mock instance.
func NewMockPasswordAuth(ctrl *gomock.Controller) *MockPasswordAuth {
	mock := &MockPasswordAuth{ctrl: ctrl}
	mock.recorder = &MockPasswordAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordAuth) EXPECT() *MockPasswordAuthMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockPasswordAuth) Auth(username, password string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", username, password)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Auth indicates an expected call of Auth.
func (mr *MockPasswordAuthMockRecorder) Auth(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockPasswordAuth)(nil).Auth), username, password)
}
