// Code generated by MockGen. DO NOT EDIT.
// Source: .//message.go

// Package pkg is a generated GoMock package.
package pkg

import (
	reflect "reflect"

	packets "github.com/eclipse/paho.golang/packets"
	gomock "github.com/golang/mock/gomock"
)

// MockMessage is a mock of Message interface.
type MockMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMockRecorder
}

// MockMessageMockRecorder is the mock recorder for MockMessage.
type MockMessageMockRecorder struct {
	mock *MockMessage
}

// NewMockMessage creates a new mock instance.
func NewMockMessage(ctrl *gomock.Controller) *MockMessage {
	mock := &MockMessage{ctrl: ctrl}
	mock.recorder = &MockMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessage) EXPECT() *MockMessageMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockMessage) Decode() packets.Packet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode")
	ret0, _ := ret[0].(packets.Packet)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockMessageMockRecorder) Decode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockMessage)(nil).Decode))
}

// GetID mocks base method.
func (m *MockMessage) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockMessageMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockMessage)(nil).GetID))
}

// GetPayload mocks base method.
func (m *MockMessage) GetPayload() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayload")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetPayload indicates an expected call of GetPayload.
func (mr *MockMessageMockRecorder) GetPayload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayload", reflect.TypeOf((*MockMessage)(nil).GetPayload))
}

// GetQoS mocks base method.
func (m *MockMessage) GetQoS() byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQoS")
	ret0, _ := ret[0].(byte)
	return ret0
}

// GetQoS indicates an expected call of GetQoS.
func (mr *MockMessageMockRecorder) GetQoS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQoS", reflect.TypeOf((*MockMessage)(nil).GetQoS))
}

// GetTopic mocks base method.
func (m *MockMessage) GetTopic() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopic")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTopic indicates an expected call of GetTopic.
func (mr *MockMessageMockRecorder) GetTopic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopic", reflect.TypeOf((*MockMessage)(nil).GetTopic))
}
