// Code generated by MockGen. DO NOT EDIT.
// Source: .//broker/event.go

// Package broker is a generated GoMock package.
package broker

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPublishListener is a mock of PublishListener interface.
type MockPublishListener struct {
	ctrl     *gomock.Controller
	recorder *MockPublishListenerMockRecorder
}

// MockPublishListenerMockRecorder is the mock recorder for MockPublishListener.
type MockPublishListenerMockRecorder struct {
	mock *MockPublishListener
}

// NewMockPublishListener creates a new mock instance.
func NewMockPublishListener(ctrl *gomock.Controller) *MockPublishListener {
	mock := &MockPublishListener{ctrl: ctrl}
	mock.recorder = &MockPublishListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublishListener) EXPECT() *MockPublishListenerMockRecorder {
	return m.recorder
}

// CreatePublishEvent mocks base method.
func (m *MockPublishListener) CreatePublishEvent(topic string, handler func(...interface{})) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreatePublishEvent", topic, handler)
}

// CreatePublishEvent indicates an expected call of CreatePublishEvent.
func (mr *MockPublishListenerMockRecorder) CreatePublishEvent(topic, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePublishEvent", reflect.TypeOf((*MockPublishListener)(nil).CreatePublishEvent), topic, handler)
}

// DeletePublishEvent mocks base method.
func (m *MockPublishListener) DeletePublishEvent(topic string, handler func(...interface{})) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeletePublishEvent", topic, handler)
}

// DeletePublishEvent indicates an expected call of DeletePublishEvent.
func (mr *MockPublishListenerMockRecorder) DeletePublishEvent(topic, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePublishEvent", reflect.TypeOf((*MockPublishListener)(nil).DeletePublishEvent), topic, handler)
}

// MockMessageStoreEvent is a mock of MessageStoreEvent interface.
type MockMessageStoreEvent struct {
	ctrl     *gomock.Controller
	recorder *MockMessageStoreEventMockRecorder
}

// MockMessageStoreEventMockRecorder is the mock recorder for MockMessageStoreEvent.
type MockMessageStoreEventMockRecorder struct {
	mock *MockMessageStoreEvent
}

// NewMockMessageStoreEvent creates a new mock instance.
func NewMockMessageStoreEvent(ctrl *gomock.Controller) *MockMessageStoreEvent {
	mock := &MockMessageStoreEvent{ctrl: ctrl}
	mock.recorder = &MockMessageStoreEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageStoreEvent) EXPECT() *MockMessageStoreEventMockRecorder {
	return m.recorder
}

// CreateListenMessageStoreEvent mocks base method.
func (m *MockMessageStoreEvent) CreateListenMessageStoreEvent(topic string, handler func(...interface{})) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateListenMessageStoreEvent", topic, handler)
}

// CreateListenMessageStoreEvent indicates an expected call of CreateListenMessageStoreEvent.
func (mr *MockMessageStoreEventMockRecorder) CreateListenMessageStoreEvent(topic, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListenMessageStoreEvent", reflect.TypeOf((*MockMessageStoreEvent)(nil).CreateListenMessageStoreEvent), topic, handler)
}

// DeleteListenMessageStoreEvent mocks base method.
func (m *MockMessageStoreEvent) DeleteListenMessageStoreEvent(topic string, handler func(...interface{})) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteListenMessageStoreEvent", topic, handler)
}

// DeleteListenMessageStoreEvent indicates an expected call of DeleteListenMessageStoreEvent.
func (mr *MockMessageStoreEventMockRecorder) DeleteListenMessageStoreEvent(topic, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListenMessageStoreEvent", reflect.TypeOf((*MockMessageStoreEvent)(nil).DeleteListenMessageStoreEvent), topic, handler)
}
