// Code generated by MockGen. DO NOT EDIT.
// Source: .//broker/topic.go

// Package broker is a generated GoMock package.
package broker

import (
	context "context"
	reflect "reflect"

	packet "github.com/BAN1ce/skyTree/pkg/packet"
	packets "github.com/eclipse/paho.golang/packets"
	gomock "github.com/golang/mock/gomock"
)

// MockTopic is a mock of Topic interface.
type MockTopic struct {
	ctrl     *gomock.Controller
	recorder *MockTopicMockRecorder
}

// MockTopicMockRecorder is the mock recorder for MockTopic.
type MockTopicMockRecorder struct {
	mock *MockTopic
}

// NewMockTopic creates a new mock instance.
func NewMockTopic(ctrl *gomock.Controller) *MockTopic {
	mock := &MockTopic{ctrl: ctrl}
	mock.recorder = &MockTopicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopic) EXPECT() *MockTopicMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTopic) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTopicMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTopic)(nil).Close))
}

// Publish mocks base method.
func (m *MockTopic) Publish(publish *packet.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", publish)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockTopicMockRecorder) Publish(publish interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockTopic)(nil).Publish), publish)
}

// Start mocks base method.
func (m *MockTopic) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockTopicMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTopic)(nil).Start), ctx)
}

// MockTopicQoS1 is a mock of TopicQoS1 interface.
type MockTopicQoS1 struct {
	ctrl     *gomock.Controller
	recorder *MockTopicQoS1MockRecorder
}

// MockTopicQoS1MockRecorder is the mock recorder for MockTopicQoS1.
type MockTopicQoS1MockRecorder struct {
	mock *MockTopicQoS1
}

// NewMockTopicQoS1 creates a new mock instance.
func NewMockTopicQoS1(ctrl *gomock.Controller) *MockTopicQoS1 {
	mock := &MockTopicQoS1{ctrl: ctrl}
	mock.recorder = &MockTopicQoS1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopicQoS1) EXPECT() *MockTopicQoS1MockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTopicQoS1) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTopicQoS1MockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTopicQoS1)(nil).Close))
}

// HandlePublishAck mocks base method.
func (m *MockTopicQoS1) HandlePublishAck(puback *packets.Puback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandlePublishAck", puback)
}

// HandlePublishAck indicates an expected call of HandlePublishAck.
func (mr *MockTopicQoS1MockRecorder) HandlePublishAck(puback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePublishAck", reflect.TypeOf((*MockTopicQoS1)(nil).HandlePublishAck), puback)
}

// Publish mocks base method.
func (m *MockTopicQoS1) Publish(publish *packet.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", publish)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockTopicQoS1MockRecorder) Publish(publish interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockTopicQoS1)(nil).Publish), publish)
}

// Start mocks base method.
func (m *MockTopicQoS1) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockTopicQoS1MockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTopicQoS1)(nil).Start), ctx)
}

// MockTopicQoS2 is a mock of TopicQoS2 interface.
type MockTopicQoS2 struct {
	ctrl     *gomock.Controller
	recorder *MockTopicQoS2MockRecorder
}

// MockTopicQoS2MockRecorder is the mock recorder for MockTopicQoS2.
type MockTopicQoS2MockRecorder struct {
	mock *MockTopicQoS2
}

// NewMockTopicQoS2 creates a new mock instance.
func NewMockTopicQoS2(ctrl *gomock.Controller) *MockTopicQoS2 {
	mock := &MockTopicQoS2{ctrl: ctrl}
	mock.recorder = &MockTopicQoS2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopicQoS2) EXPECT() *MockTopicQoS2MockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTopicQoS2) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTopicQoS2MockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTopicQoS2)(nil).Close))
}

// HandlePublishComp mocks base method.
func (m *MockTopicQoS2) HandlePublishComp(pubcomp *packets.Pubcomp) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandlePublishComp", pubcomp)
}

// HandlePublishComp indicates an expected call of HandlePublishComp.
func (mr *MockTopicQoS2MockRecorder) HandlePublishComp(pubcomp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePublishComp", reflect.TypeOf((*MockTopicQoS2)(nil).HandlePublishComp), pubcomp)
}

// HandlePublishRec mocks base method.
func (m *MockTopicQoS2) HandlePublishRec(pubrec *packets.Pubrec) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandlePublishRec", pubrec)
}

// HandlePublishRec indicates an expected call of HandlePublishRec.
func (mr *MockTopicQoS2MockRecorder) HandlePublishRec(pubrec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePublishRec", reflect.TypeOf((*MockTopicQoS2)(nil).HandlePublishRec), pubrec)
}

// Publish mocks base method.
func (m *MockTopicQoS2) Publish(publish *packet.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", publish)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockTopicQoS2MockRecorder) Publish(publish interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockTopicQoS2)(nil).Publish), publish)
}

// Start mocks base method.
func (m *MockTopicQoS2) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockTopicQoS2MockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTopicQoS2)(nil).Start), ctx)
}
