// Code generated by MockGen. DO NOT EDIT.
// Source: .//broker/client.go

// Package broker is a generated GoMock package.
package broker

import (
	broker "github.com/BAN1ce/skyTree/pkg/broker/client"
	reflect "reflect"

	packet "github.com/BAN1ce/skyTree/pkg/packet"
	packets "github.com/eclipse/paho.golang/packets"
	gomock "github.com/golang/mock/gomock"
)

// MockClientID is a mock of ID interface.
type MockClientID struct {
	ctrl     *gomock.Controller
	recorder *MockClientIDMockRecorder
}

// MockClientIDMockRecorder is the mock recorder for MockClientID.
type MockClientIDMockRecorder struct {
	mock *MockClientID
}

// NewMockClientID creates a new mock instance.
func NewMockClientID(ctrl *gomock.Controller) *MockClientID {
	mock := &MockClientID{ctrl: ctrl}
	mock.recorder = &MockClientIDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientID) EXPECT() *MockClientIDMockRecorder {
	return m.recorder
}

// GetID mocks base method.
func (m *MockClientID) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockClientIDMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockClientID)(nil).GetID))
}

// MockPacketWriter is a mock of PacketWriter interface.
type MockPacketWriter struct {
	ctrl     *gomock.Controller
	recorder *MockPacketWriterMockRecorder
}

// MockPacketWriterMockRecorder is the mock recorder for MockPacketWriter.
type MockPacketWriterMockRecorder struct {
	mock *MockPacketWriter
}

// NewMockPacketWriter creates a new mock instance.
func NewMockPacketWriter(ctrl *gomock.Controller) *MockPacketWriter {
	mock := &MockPacketWriter{ctrl: ctrl}
	mock.recorder = &MockPacketWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPacketWriter) EXPECT() *MockPacketWriterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPacketWriter) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPacketWriterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPacketWriter)(nil).Close))
}

// GetID mocks base method.
func (m *MockPacketWriter) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockPacketWriterMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockPacketWriter)(nil).GetID))
}

// WritePacket mocks base method.
func (m *MockPacketWriter) WritePacket(packet packets.Packet) error {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WritePacket", packet)
	return err
}

// WritePacket indicates an expected call of WritePacket.
func (mr *MockPacketWriterMockRecorder) WritePacket(packet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WritePacket", reflect.TypeOf((*MockPacketWriter)(nil).WritePacket), packet)
}

// MockClientWriter is a mock of Client interface.
type MockClientWriter struct {
	ctrl     *gomock.Controller
	recorder *MockClientWriterMockRecorder
}

// MockClientWriterMockRecorder is the mock recorder for MockClientWriter.
type MockClientWriterMockRecorder struct {
	mock *MockClientWriter
}

// NewMockClientWriter creates a new mock instance.
func NewMockClientWriter(ctrl *gomock.Controller) *MockClientWriter {
	mock := &MockClientWriter{ctrl: ctrl}
	mock.recorder = &MockClientWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWriter) EXPECT() *MockClientWriterMockRecorder {
	return m.recorder
}

// GetPacketWriter mocks base method.
func (m *MockClientWriter) GetPacketWriter() broker.PacketWriter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPacketWriter")
	ret0, _ := ret[0].(broker.PacketWriter)
	return ret0
}

// GetPacketWriter indicates an expected call of GetPacketWriter.
func (mr *MockClientWriterMockRecorder) GetPacketWriter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPacketWriter", reflect.TypeOf((*MockClientWriter)(nil).GetPacketWriter))
}

// PubRel mocks base method.
func (m *MockClientWriter) PubRel(message *packet.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PubRel", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// PubRel indicates an expected call of PubRel.
func (mr *MockClientWriterMockRecorder) PubRel(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubRel", reflect.TypeOf((*MockClientWriter)(nil).PubRel), message)
}

// Publish mocks base method.
func (m *MockClientWriter) Publish(publish *packet.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", publish)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockClientWriterMockRecorder) Publish(publish interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockClientWriter)(nil).Publish), publish)
}
