// Code generated by MockGen. DO NOT EDIT.
// Source: .//broker/kv_store.go

// Package broker is a generated GoMock package.
package broker

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockKeyValueStore is a mock of KeyValueStore interface.
type MockKeyValueStore struct {
	ctrl     *gomock.Controller
	recorder *MockKeyValueStoreMockRecorder
}

// MockKeyValueStoreMockRecorder is the mock recorder for MockKeyValueStore.
type MockKeyValueStoreMockRecorder struct {
	mock *MockKeyValueStore
}

// NewMockKeyValueStore creates a new mock instance.
func NewMockKeyValueStore(ctrl *gomock.Controller) *MockKeyValueStore {
	mock := &MockKeyValueStore{ctrl: ctrl}
	mock.recorder = &MockKeyValueStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyValueStore) EXPECT() *MockKeyValueStoreMockRecorder {
	return m.recorder
}

// DeleteKey mocks base method.
func (m *MockKeyValueStore) DeleteKey(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKey", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKey indicates an expected call of DeleteKey.
func (mr *MockKeyValueStoreMockRecorder) DeleteKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKey", reflect.TypeOf((*MockKeyValueStore)(nil).DeleteKey), ctx, key)
}

// PutKey mocks base method.
func (m *MockKeyValueStore) PutKey(ctx context.Context, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutKey", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutKey indicates an expected call of PutKey.
func (mr *MockKeyValueStoreMockRecorder) PutKey(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutKey", reflect.TypeOf((*MockKeyValueStore)(nil).PutKey), ctx, key, value)
}

// ReadKey mocks base method.
func (m *MockKeyValueStore) ReadKey(ctx context.Context, key string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadKey", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadKey indicates an expected call of ReadKey.
func (mr *MockKeyValueStoreMockRecorder) ReadKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadKey", reflect.TypeOf((*MockKeyValueStore)(nil).ReadKey), ctx, key)
}

// ReadPrefixKey mocks base method.
func (m *MockKeyValueStore) ReadPrefixKey(ctx context.Context, prefix string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPrefixKey", ctx, prefix)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPrefixKey indicates an expected call of ReadPrefixKey.
func (mr *MockKeyValueStoreMockRecorder) ReadPrefixKey(ctx, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPrefixKey", reflect.TypeOf((*MockKeyValueStore)(nil).ReadPrefixKey), ctx, prefix)
}
