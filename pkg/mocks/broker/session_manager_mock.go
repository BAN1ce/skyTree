// Code generated by MockGen. DO NOT EDIT.
// Source: .//broker/manager.go

// Package broker is a generated GoMock package.
package broker

import (
	broker "github.com/BAN1ce/skyTree/pkg/broker/session"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionManager is a mock of Manager interface.
type MockSessionManager struct {
	ctrl     *gomock.Controller
	recorder *MockSessionManagerMockRecorder
}

// MockSessionManagerMockRecorder is the mock recorder for MockSessionManager.
type MockSessionManagerMockRecorder struct {
	mock *MockSessionManager
}

// NewMockSessionManager creates a new mock instance.
func NewMockSessionManager(ctrl *gomock.Controller) *MockSessionManager {
	mock := &MockSessionManager{ctrl: ctrl}
	mock.recorder = &MockSessionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionManager) EXPECT() *MockSessionManagerMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockSessionManager) AddClientSession(key string, session broker.Session) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddClientSession", key, session)
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockSessionManagerMockRecorder) CreateSession(key, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClientSession", reflect.TypeOf((*MockSessionManager)(nil).AddClientSession), key, session)
}

// DeleteSession mocks base method.
func (m *MockSessionManager) DeleteClientSession(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteClientSession", key)
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockSessionManagerMockRecorder) DeleteSession(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientSession", reflect.TypeOf((*MockSessionManager)(nil).DeleteClientSession), key)
}

// NewSession mocks base method.
func (m *MockSessionManager) NewClientSession(key string) broker.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewClientSession", key)
	ret0, _ := ret[0].(broker.Session)
	return ret0
}

// NewSession indicates an expected call of NewSession.
func (mr *MockSessionManagerMockRecorder) NewSession(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClientSession", reflect.TypeOf((*MockSessionManager)(nil).NewClientSession), key)
}

// ReadSession mocks base method.
func (m *MockSessionManager) ReadClientSession(key string) (broker.Session, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadClientSession", key)
	ret0, _ := ret[0].(broker.Session)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ReadSession indicates an expected call of ReadSession.
func (mr *MockSessionManagerMockRecorder) ReadSession(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadClientSession", reflect.TypeOf((*MockSessionManager)(nil).ReadClientSession), key)
}
