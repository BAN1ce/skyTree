// Code generated by MockGen. DO NOT EDIT.
// Source: session_store.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionStore is a mock of SessionStore interface.
type MockSessionStore struct {
	ctrl     *gomock.Controller
	recorder *MockSessionStoreMockRecorder
}

// MockSessionStoreMockRecorder is the mock recorder for MockSessionStore.
type MockSessionStoreMockRecorder struct {
	mock *MockSessionStore
}

// NewMockSessionStore creates a new mock instance.
func NewMockSessionStore(ctrl *gomock.Controller) *MockSessionStore {
	mock := &MockSessionStore{ctrl: ctrl}
	mock.recorder = &MockSessionStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionStore) EXPECT() *MockSessionStoreMockRecorder {
	return m.recorder
}

// DeleteKey mocks base method.
func (m *MockSessionStore) DeleteKey(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKey", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKey indicates an expected call of DeleteKey.
func (mr *MockSessionStoreMockRecorder) DeleteKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKey", reflect.TypeOf((*MockSessionStore)(nil).DeleteKey), ctx, key)
}

// PutKey mocks base method.
func (m *MockSessionStore) PutKey(ctx context.Context, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutKey", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutKey indicates an expected call of PutKey.
func (mr *MockSessionStoreMockRecorder) PutKey(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutKey", reflect.TypeOf((*MockSessionStore)(nil).PutKey), ctx, key, value)
}

// ReadKey mocks base method.
func (m *MockSessionStore) ReadKey(ctx context.Context, key string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadKey", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadKey indicates an expected call of ReadKey.
func (mr *MockSessionStoreMockRecorder) ReadKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadKey", reflect.TypeOf((*MockSessionStore)(nil).ReadKey), ctx, key)
}

// ReadPrefixKey mocks base method.
func (m *MockSessionStore) ReadPrefixKey(ctx context.Context, prefix string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPrefixKey", ctx, prefix)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPrefixKey indicates an expected call of ReadPrefixKey.
func (mr *MockSessionStoreMockRecorder) ReadPrefixKey(ctx, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPrefixKey", reflect.TypeOf((*MockSessionStore)(nil).ReadPrefixKey), ctx, prefix)
}
